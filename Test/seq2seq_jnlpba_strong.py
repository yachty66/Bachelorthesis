# -*- coding: utf-8 -*-
"""Seq2seq_jnlpba_strong.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Go5wxD5rJNRUWyB6biTWMNpHae_LjGt4
"""

'''
!nvidia-smi
!pip install transformers
!pip install pytorch_lightning
!pip install sentencepiece datasets seqeval
!pip install wandb
'''

from transformers import (
    AdamW,
    MT5ForConditionalGeneration,
    T5ForConditionalGeneration,
    T5Tokenizer,
    AutoTokenizer,
    get_linear_schedule_with_warmup
)
from datasets import load_dataset, load_metric
from datasets import DatasetDict
import pytorch_lightning as pl
from torch.utils.data import Dataset, DataLoader
import torch
import torchmetrics
import numpy as np
import pandas as pd
from nltk.tokenize import sent_tokenize
import argparse
import glob
import os
import json
import time
import logging
import random
import re
from itertools import chain
from string import punctuation
import wandb

import nltk
nltk.download('punkt')
#wandb.login()

import wandb
wandb.init(project="Bachelor_Thesis", entity="maxhager28", name="Seq2seq_jnlpba_strong")
from pytorch_lightning import Trainer
from pytorch_lightning.loggers import WandbLogger
wandb_logger = WandbLogger(project="Bachelor_Thesis")
#$

def set_seed(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(seed)
set_seed(42)

"""### Model

"""

from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import numpy as np
'''
- [x] change batch size to original values
- [x] print each of the values in the batch 
- [x] print tokens
- [x] find out if the datasets match
- [x] fix the order of my cells 
- [x] add my own method
- [x] print the results of my own method
- [x] check again how the values for the metrics in my token classification look like
- [x] understand how i can calculate the metrics in the same way like i do in the token classification
- [x] log everything which is needed with self.log
- [x] fix bug with that line is not displayed 
- [x] create same panels like in run with weak data
- [x] add my metrics to wandb
- [ ] add confusion matrix as image
- [ ] configure my validation steps in the same way like in token classification
- [ ] next steps
- [ ] return weak to my original training colab
'''
#$
class T5FineTuner(pl.LightningModule):
    def __init__(self, hparam):
        super(T5FineTuner, self).__init__()
        self.hparam = hparam
        self.model = T5ForConditionalGeneration.from_pretrained(
            hparam.model_name_or_path)
        self.tokenizer = AutoTokenizer.from_pretrained(
            hparam.model_name_or_path
        )
        #wandb.init(config=self.hparam)  # initialize W&B run
        self.save_hyperparameters()
        self.true = []
        self.pred = []

    def is_logger(self):
        return True

    def label_pred(self, input, actual):
      predictions = []

      for s in input:
        pairs = s.split(";")
        dict_list = []
        for p in pairs:
          key_value = p.split(":")
          if len(key_value) == 2:
            key, value = key_value
            dict_list.append({key.strip(): value.strip()})
          else:
            dict_list.append({"key": "null"})
        predictions.append(dict_list)

      tokens = []
      t = []
      for token_tuple in actual:
        for i in token_tuple:
          t.append(i[0])
        tokens.append(t)
        t = []

      result = []

      for i, (dicts, t) in enumerate(zip(predictions, tokens)):
        lst = ["O"] * len(t)
        for d in dicts:
          for k, v in d.items():
            if v in t:
              lst[t.index(v)] = k
        result.append(lst)

      return result
      
    def forward(
        self, input_ids, attention_mask=None, decoder_input_ids=None, decoder_attention_mask=None, lm_labels=None
    ):
        return self.model(
            input_ids,
            attention_mask=attention_mask,
            decoder_input_ids=decoder_input_ids,
            decoder_attention_mask=decoder_attention_mask,
            labels=lm_labels,
        )

    def _step(self, batch):
        lm_labels = batch["target_ids"]
        lm_labels[lm_labels[:, :] == self.tokenizer.pad_token_id] = -100

        outputs = self(
            input_ids=batch["source_ids"],
            attention_mask=batch["source_mask"],
            lm_labels=lm_labels,
            decoder_attention_mask=batch['target_mask']
        )
        loss = outputs[0]
        return loss

    def training_step(self, batch, batch_idx):
      loss = self._step(batch)
      self.log("loss", loss)
      return {'loss': loss}

    def training_epoch_end(self, outputs):
        avg_train_loss = torch.stack([x["loss"] for x in outputs]).mean()
        tensorboard_logs = {"avg_train_loss": avg_train_loss}
        #wandb.log({"avg_train_loss": avg_train_loss})

    def map_tags(self, lst):
      #map all elements in list to 
      mapping = {'O': 0, 'rna': 1, 'dna': 2, 'cell_line': 3, 'cell_type': 4, 'protein': 5}
      result = [[mapping[tag] for tag in tags] for tags in lst]    
      return result

    def validation_step(self, batch, batch_idx):
        outputs = []
        targets = []
        all_text = []
        true_labels = []
        pred_labels = []
        predictions = []
        predictions_temp = []
        counter = 0
        input_ids = batch['source_ids'].to("cuda")
        attention_mask = batch['source_mask'].to("cuda")
        outs = model.model.generate(input_ids=input_ids, attention_mask=attention_mask)
        dec = [tokenizer.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=False).strip() for ids in outs]
        target = [tokenizer.decode(ids, skip_special_tokens=True,  clean_up_tokenization_spaces=False).strip()for ids in batch["target_ids"]]
        texts = [tokenizer.decode(ids, skip_special_tokens=True,  clean_up_tokenization_spaces=False).strip()for ids in batch["source_ids"]]
        predicted_label = self.label_pred(dec, batch["tokens"])
        true_label = self.label_pred(target, batch["tokens"])
        pred_mapped = self.map_tags(predicted_label)
        true_mapped = self.map_tags(true_label)
        true_label = np.array([item for sublist in true_mapped for item in sublist])
        predicted_label = np.array([item for sublist in pred_mapped for item in sublist])
        accuracy = accuracy_score(true_label, predicted_label)
        precision, recall, fscore, support = precision_recall_fscore_support(true_label, predicted_label, zero_division=1, average="weighted")
        self.true.extend(true_label)
        self.pred.extend(predicted_label)
        print(true_label)
        print(predicted_label)

        cm = confusion_matrix(true_label, predicted_label)
        print(cm)
        plt.imshow(cm, cmap='Blues')
        plt.title("Confusion Matrix")
        plt.xticks([0,1], ["Negative", "Positive"])
        plt.yticks([0,1], ["Negative", "Positive"])
        plt.xlabel("Predicted")
        plt.ylabel("True")
        #wandb.log({"confusion_matrix": wandb.Image(plt)})

        #TODO confusion matrix
        val_loss = self._step(batch)
       # wandb.log(){"conf_matrix_test": cm}
        #wandb.log({"conf_mat": wandb.plot.confusion_matrix(probs=None, y_true=true_label, preds=predicted_label)})

        #wandb.log({"val_loss": val_loss, 'precision': float(precision), 'recall': recall, 'f1': fscore,'accuracy':accuracy, 'support': support})
        self.log('val_loss', val_loss, prog_bar=True)
        self.log('precision', precision)
        self.log("recall", recall)
        self.log('f1', fscore)
        self.log('accuracy', accuracy)
        #self.log('confusion_matrix', cm)
        return {"val_loss": val_loss, 'precision': precision, 'recall': recall, 'f1': fscore,'accuracy':accuracy, 'support': support}
#$

    def validation_epoch_end(self, outputs):
      true_label=self.true
      predicted_label=self.pred
      cm = confusion_matrix(true_label, predicted_label)
      plt.imshow(cm, cmap='Blues')
      plt.title("Confusion Matrix")
      plt.xticks([0,1], ["Negative", "Positive"])
      plt.yticks([0,1], ["Negative", "Positive"])
      plt.xlabel("Predicted")
      plt.ylabel("True")
      wandb.log({"confusion_matrix": wandb.Image(plt)})
      '''avg_loss = torch.stack([x["val_loss"] for x in outputs]).mean()
      tensorboard_logs = {"val_loss": avg_loss}
      wandb.log({"avg_val_loss": avg_loss}) '''

    def configure_optimizers(self):
        model = self.model
        no_decay = ["bias", "LayerNorm.weight"]
        optimizer_grouped_parameters = [
            {
                "params": [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)],
                "weight_decay": self.hparam.weight_decay,
            },
            {
                "params": [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)],
                "weight_decay": 0.0,
            },
        ]
        optimizer = AdamW(optimizer_grouped_parameters,
                          lr=self.hparam.learning_rate, eps=self.hparam.adam_epsilon)
        self.opt = optimizer
        return [optimizer]

    def optimizer_step(self,
                       epoch=None,
                       batch_idx=None,
                       optimizer=None,
                       optimizer_idx=None,
                       optimizer_closure=None,
                       on_tpu=None,
                       using_native_amp=None,
                       using_lbfgs=None
                       ):
        optimizer.step(closure=optimizer_closure)
        optimizer.zero_grad()
        self.lr_scheduler.step()

    def get_tqdm_dict(self):
        tqdm_dict = {"loss": "{:.3f}".format(
            self.trainer.avg_loss), "lr": self.lr_scheduler.get_last_lr()[-1]}
        return tqdm_dict

    def train_dataloader(self):
        train_dataset = get_dataset(
            tokenizer=self.tokenizer, type_path="train", args=self.hparam)
        dataloader = DataLoader(train_dataset, batch_size=self.hparam.train_batch_size,
                                drop_last=True, shuffle=True, num_workers=2)
        t_total = (
            (len(dataloader.dataset) //
             (self.hparam.train_batch_size * max(1, self.hparam.n_gpu)))
            // self.hparam.gradient_accumulation_steps
            * float(self.hparam.num_train_epochs)
        )
        scheduler = get_linear_schedule_with_warmup(
            self.opt, num_warmup_steps=self.hparam.warmup_steps, num_training_steps=t_total
        )
        self.lr_scheduler = scheduler
        return dataloader

    def val_dataloader(self):
        val_dataset = get_dataset(
            tokenizer=self.tokenizer, type_path="validation", args=self.hparam)
        return DataLoader(val_dataset, batch_size=self.hparam.eval_batch_size, num_workers=2)

logger = logging.getLogger(__name__)

class LoggingCallback(pl.Callback):
    def on_validation_end(self, trainer, pl_module):
        logger.info("***** Validation results *****")
        if pl_module.is_logger():
            metrics = trainer.callback_metrics
            # Log results
            for key in sorted(metrics):
                if key not in ["log", "progress_bar"]:
                    logger.info("{} = {}\n".format(key, str(metrics[key])))

    def on_test_end(self, trainer, pl_module):
        logger.info("***** Test results *****")

        if pl_module.is_logger():
            metrics = trainer.callback_metrics

            # Log and save results to file
            output_test_results_file = os.path.join(
                pl_module.hparams.output_dir, "test_results.txt")
            with open(output_test_results_file, "w") as writer:
                for key in sorted(metrics):
                    if key not in ["log", "progress_bar"]:
                        logger.info("{} = {}\n".format(key, str(metrics[key])))
                        writer.write("{} = {}\n".format(
                            key, str(metrics[key])))

#$

args_dict = dict(
    data_dir="jnlpba",  # path for data files
    output_dir="checkpoints",  # path to save the checkpoints
    model_name_or_path='t5-small',
    tokenizer_name_or_path='t5-small',
    max_seq_length=512,  # todo figure out
    learning_rate=3e-4,
    weight_decay=0.0,
    adam_epsilon=1e-8,
    warmup_steps=0,
    train_batch_size=8, # 4/2/1 if t5-small not working
    eval_batch_size=8,
    num_train_epochs=3,
    gradient_accumulation_steps=16,
    n_gpu=1,
    early_stop_callback=False,
    fp_16=True, # if you want to enable 16-bit training then install apex and set this to true
    opt_level='O1', # you can find out more on optimisation levels here https://nvidia.github.io/apex/amp.html#opt-levels-and-properties
    max_grad_norm=1, # if you enable 16-bit training then set this to a sensible value, 0.5 is a good default
    seed=42,
    val_check_interval = 50
)

"""### Dataset

"""

from datasets import load_dataset, load_metric
from datasets import DatasetDict, Dataset
import random
import pandas as pd
random.seed(42)

jnlpba = load_dataset('jnlpba', split=['train[:100]', "validation[:100]"])
jnlpba = DatasetDict({"train": jnlpba[0], "validation": jnlpba[1]})

class JnlpbDataset(Dataset):

    def __init__(self, tokenizer, dataset, type_path, portion, max_len=512):
        self.dataset = dataset[type_path]
        self.portion = portion
        self.max_len = max_len
        self.tokenizer = tokenizer
        # todo make sure i dont need this
        self.tokenizer.max_length = max_len
        self.tokenizer.model_max_length = max_len
        self.inputs = []
        self.targets = []
        self.merge()
        self.convert()
        self.apply()
        self._build()
        
    def __len__(self):
        return len(self.inputs)
    
    def __getitem__(self, index):
        source_ids = self.inputs[index]["input_ids"].squeeze()
        target_ids = self.targets[index]["input_ids"].squeeze()

        src_mask    = self.inputs[index]["attention_mask"].squeeze()  # might need to squeeze
        target_mask = self.targets[index]["attention_mask"].squeeze()  # might need to squeeze

        tokens = self.dataset["tokens"]
        return {"source_ids": source_ids, "source_mask": src_mask, "target_ids": target_ids, "target_mask": target_mask, "tokens": tokens}

    def map_tags(self, row):
        mapping = {
            0: "O",
            1: "B-DNA",
            2: "I-DNA",
            3: "B-RNA",
            4: "I-RNA",
            5: "B-cell_line",
            6: "I-cell_line",
            7: "B-cell_type",
            8: "I-cell_type",
            9: "B-protein",
            10: "I-protein"
        }
        row['ner_tags'] = [[mapping[tag] for tag in row['ner_tags']]][0]
        return row

    def convert(self):
        df_train = pd.DataFrame(self.dataset)
        l = []
        l_temp = []
        for i in range(len(df_train)):
            for j in range(len(df_train['ner_tags'][i])):
              if df_train['ner_tags'][i][j] != "O":
                l_temp.append(df_train['ner_tags'][i][j] + ': ' + df_train['tokens'][i][j])
            l.append(l_temp)
            l_temp = []
        d = {'spans': l}
        df_train = df_train.assign(spans=l)
        train = Dataset.from_pandas(df_train)
        self.dataset = train
        return train
    
    def merge_tags(self, tags, tokens):
      merged_tags = []
      merged_tokens = []
      i = 0
      while i < len(tags):
          if tags[i].startswith('B-'):
              merged_tag = tags[i][2:]
              merged_token = tokens[i]
              i += 1
              while i < len(tags) and tags[i].startswith('I-'):
                  merged_tag += ' ' + tags[i][2:]
                  merged_token += ' ' + tokens[i]
                  i += 1
              merged_tags.append(merged_tag)
              merged_tokens.append(merged_token)
          else:
              merged_tags.append(tags[i])
              merged_tokens.append(tokens[i])
              i += 1
      for i in range(len(merged_tags)):
        s = merged_tags[i].split()[0]
        s = s[0].upper() + s[1:]
        merged_tags[i] = s
      return merged_tags, merged_tokens

    def merge(self):
      df_train = pd.DataFrame(self.dataset)
      df_train = df_train.apply(self.map_tags, axis=1)
      df_train[['ner_tags', 'tokens']] = df_train.apply(lambda x: self.merge_tags(x['ner_tags'], x['tokens']), axis=1, result_type='expand')
      self.dataset = Dataset.from_pandas(df_train)

    def _build(self):
      for idx in range(len(self.dataset)):
          input_, target = " ".join(self.dataset[idx]["tokens"]), "; ".join(
              self.dataset[idx]["spans"])
          input_ = input_.lower() + ' </s>'
          target = target.lower() + " </s>"

          tokenized_inputs = self.tokenizer.batch_encode_plus(
              [input_], max_length=self.max_len, padding="max_length", truncation=True, return_tensors="pt"
          )

          tokenized_targets = self.tokenizer.batch_encode_plus(
              [target], max_length=self.max_len, padding="max_length", truncation=True, return_tensors="pt"
          )
          self.inputs.append(tokenized_inputs)
          self.targets.append(tokenized_targets)


    def missing(self, row):
      lst = row["ner_tags"]
      if any(x != 0 for x in lst):
          index = random.choice([i for i, x in enumerate(lst) if x != 0])
          lst[index] = 0
          row["ner_tags"] = lst
          return row
      else:
          return row

    def wrong(self, row, num_tags):
        lst = row["ner_tags"]
        tags = []
        for i in range(1,num_tags):
            tags.append(i)
        if any(x != 0 for x in lst):
            indices = [i for i, x in enumerate(lst) if x != 0]
            random_index = random.choice(indices)
            current_value = lst[random_index]
            random_number = random.choice([x for x in [1, 2, 3, 4, 5] if x != current_value])
            lst[random_index] = random_number
            row["ner_tags"] = lst
            return row
        else:
            return row
                        
    def uncomplete(self):
        pass

    def apply(self):
        num_portion = int(len(self.dataset) * self.portion / 100)
        df = self.dataset.to_pandas() 
        tags = [tag for row in df['ner_tags'] for tag in row]
        unique_tags = set(tags)
        mapping = {'O': 0, 'RNA': 1, 'DNA': 2, 'Cell_line': 3, 'Cell_type': 4, 'Protein': 5}
        df['ner_tags'] = [[mapping[tag] for tag in tags] for tags in df['ner_tags']]    
        for i in range(num_portion):
            random_number = random.randint(1, 2)
            if random_number == 1:
                new_row = self.missing(df.iloc[i])
                df.iloc[i] = new_row
            elif random_number == 2:
                num_tags = len(unique_tags)
                new_row = self.wrong(df.iloc[i], num_tags)
                df.iloc[i] = new_row
            '''else:
                self.uncomplete()'''
        self.dataset = Dataset.from_pandas(df)
        
    def get_dataset(self):
        return self.dataset

tokenizer = AutoTokenizer.from_pretrained('t5-small')

input_dataset_train = JnlpbDataset(tokenizer=tokenizer, dataset=jnlpba, type_path='train', portion=0)

dataset_train = input_dataset_train.get_dataset()

input_dataset_validation = JnlpbDataset(tokenizer=tokenizer, dataset=jnlpba, type_path='validation', portion=0)
dataset_train = input_dataset_train.get_dataset()

datasets = DatasetDict({"train": dataset_train, "validation": input_dataset_validation})

#tokenizer = AutoTokenizer.from_pretrained('t5-small')

#input_dataset = JnlpbDataset(tokenizer=tokenizer, dataset=jnlpba, type_path='train')

args = argparse.Namespace(**args_dict)
model = T5FineTuner(args)

checkpoint_callback = pl.callbacks.ModelCheckpoint(
    filename=args.output_dir+"/checkpoint.pth", monitor="val_loss", mode="min", save_top_k=5
)

train_params = dict(
    accumulate_grad_batches=args.gradient_accumulation_steps,
    #accelerator='gpu',
    #gpus=args.n_gpu,
    max_epochs=args.num_train_epochs,
    #early_stop_callback=False,
    precision=32,
    #amp_level=args.opt_level,
    gradient_clip_val=args.max_grad_norm,
    #checkpoint_callback=checkpoint_callback,
    logger=wandb_logger,
    callbacks=[checkpoint_callback, LoggingCallback()],
)

def get_dataset(tokenizer, type_path, args):
    tokenizer.max_length = args.max_seq_length
    tokenizer.model_max_length = args.max_seq_length
    jnlpba = load_dataset('jnlpba', split=['train[:10]', "validation[:10]"])
    jnlpba = DatasetDict({"train": jnlpba[0], "validation": jnlpba[1]})
    dataset = jnlpba
    return JnlpbDataset(tokenizer=tokenizer, dataset=dataset, type_path=type_path, portion=0)

trainer = pl.Trainer(**train_params)

trainer.fit(model)

"""### Evaluation"""

'''#todo path needs to be adjusted depending on where model was saved 
wandb.save('/content/lightning_logs/version_4/checkpoints/checkpoints/checkpoint.pth.ckpt')
api = wandb.Api()
#todo project path needs to be adjusted
run = api.run("htw/uncategorized/7w324geo")
for file in run.files():
    file.download(replace=True)
#depends on where i save the model
model = model.load_from_checkpoint("/content/checkpoint.pth.ckpt")
wandb.finish()'''